import java.sql.Date;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Punya
 */
public class MainFrame extends javax.swing.JDialog {

    /**
     * Creates new form MainFrame
     */
    public MainFrame(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        rebuildFacultyComboBoxes();
        rebuildDateComboBoxes();
        rebuildRoomComboBoxes();
        rebuildCancelTable();
    }
      public void rebuildFacultyComboBoxes()
    {
        reserveFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray())); // Putting data into reserveFacultyComboBox
        reservationStatusByFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray())); // Putting data into reservationStatusByFacultyComboBoc
    }
      
      public void rebuildDateComboBoxes(){
          reserveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray())); // Putting data into reserveDatecomboBox
          reservationStatusDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getAllDates().toArray())); // Putting data into reservationStatusDateComboBox
      }
      
      public void rebuildRoomComboBoxes(){
          manageRoomComboBox.setModel(new javax.swing.DefaultComboBoxModel(RoomQueries.getAllRooms().toArray())); // Putting data into manageRoomComboBox
      }
      
      public void rebuildCancelTable(){
          ArrayList<WaitlistEntry> waitlistArray = WaitlistQueries.getWaitlist();
          ArrayList<ReservationEntry> reservationArray = ReservationQueries.getReservations();
          DefaultTableModel tableModel = (DefaultTableModel) cancelTable.getModel(); 
          tableModel.setRowCount(0); // Setting the table row count to 0
          for(WaitlistEntry waitlist: waitlistArray){  // Iterating through the waitlistArray declared above
               Object[] r = new Object[]{"W",waitlist.getFaculty(),String.valueOf(waitlist.getDate())}; // Creating waitlist entry objects for the table
              tableModel.addRow(r); // Adding the waitlist entry into the table as a row
          }
          for(ReservationEntry reservation: reservationArray){ // Iterating through the reservationArray
              Object[] r = new Object[]{"R",reservation.getFaculty(),String.valueOf(reservation.getDate())}; // Creating reservation entry objects to be placed in the table
              tableModel.addRow(r); // Adding the reservation entry into the table as a row
          }
      }
      
      
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addFacultyNameTextField = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        addFacultyStatusLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        reserveFacultyComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        reserveDateComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        reserveSeatsRequiredTextField = new javax.swing.JTextField();
        reserveButton = new javax.swing.JButton();
        reserveStatusLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        reservationStatusButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        reservationStatusTextArea = new javax.swing.JTextArea();
        reservationStatusDateComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        reservationStatusByFacultyComboBox = new javax.swing.JComboBox<>();
        reservationStatusByFacultyButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        reservationStatusByFacultyTextArea = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        waitlistStatusButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        waitlistStatusTextArea = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        addDateSubmitButton = new javax.swing.JButton();
        addDateSpinner = new javax.swing.JSpinner();
        addDateLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        addRoomJLabel = new javax.swing.JTextField();
        manageRoomSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        manageRoomComboBox = new javax.swing.JComboBox<>();
        addRoomSubmitButton = new javax.swing.JButton();
        dropRoomSubmitButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        manageRoomLabel = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        cancelSubmitButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        cancelTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        cancelJLabel = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 255));
        jLabel1.setText("Room Scheduler");

        jLabel2.setText("Faculty Name:");

        addFacultyNameTextField.setColumns(20);

        addFacultyButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        addFacultyButton.setText("Submit");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        addFacultyStatusLabel.setText("      ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(addFacultyStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addFacultyButton)
                            .addComponent(addFacultyNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(588, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addFacultyNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addFacultyButton)
                .addGap(18, 18, 18)
                .addComponent(addFacultyStatusLabel)
                .addContainerGap(338, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Faculty", jPanel1);

        jLabel3.setText("Faculty:");

        jLabel4.setText("Date:");

        reserveDateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveDateComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Seats required:");

        reserveSeatsRequiredTextField.setColumns(5);

        reserveButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        reserveButton.setText("Submit");
        reserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveButtonActionPerformed(evt);
            }
        });

        reserveStatusLabel.setText("        ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(reserveStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE))
                        .addGap(434, 434, 434))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reserveButton)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(reserveSeatsRequiredTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(reserveSeatsRequiredTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(reserveButton)
                .addGap(18, 18, 18)
                .addComponent(reserveStatusLabel)
                .addContainerGap(278, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Reserve", jPanel2);

        jLabel6.setText("Date:");

        reservationStatusButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        reservationStatusButton.setText("Submit");
        reservationStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservationStatusButtonActionPerformed(evt);
            }
        });

        reservationStatusTextArea.setEditable(false);
        reservationStatusTextArea.setColumns(20);
        reservationStatusTextArea.setRows(5);
        jScrollPane2.setViewportView(reservationStatusTextArea);

        jLabel11.setText("Faculty:");

        reservationStatusByFacultyButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        reservationStatusByFacultyButton.setText("Submit");
        reservationStatusByFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservationStatusByFacultyButtonActionPerformed(evt);
            }
        });

        reservationStatusByFacultyTextArea.setEditable(false);
        reservationStatusByFacultyTextArea.setColumns(20);
        reservationStatusByFacultyTextArea.setRows(5);
        jScrollPane3.setViewportView(reservationStatusByFacultyTextArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reservationStatusDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(reservationStatusButton))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(reservationStatusByFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(reservationStatusByFacultyButton)))
                        .addGap(0, 612, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(reservationStatusButton)
                    .addComponent(reservationStatusDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(reservationStatusByFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reservationStatusByFacultyButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Reservation Status", jPanel3);

        waitlistStatusButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        waitlistStatusButton.setText("Submit");
        waitlistStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitlistStatusButtonActionPerformed(evt);
            }
        });

        waitlistStatusTextArea.setColumns(20);
        waitlistStatusTextArea.setRows(5);
        jScrollPane1.setViewportView(waitlistStatusTextArea);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addComponent(waitlistStatusButton)
                .addContainerGap(574, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(waitlistStatusButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Waitlist Status", jPanel4);

        jLabel8.setText("Date:");

        addDateSubmitButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        addDateSubmitButton.setText("Submit");
        addDateSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateSubmitButtonActionPerformed(evt);
            }
        });

        addDateSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), new java.util.Date(), null, java.util.Calendar.DAY_OF_MONTH));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(addDateSubmitButton)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(addDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)))
                    .addComponent(addDateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(602, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(addDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(addDateSubmitButton)
                .addGap(50, 50, 50)
                .addComponent(addDateLabel)
                .addContainerGap(282, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Add Date", jPanel5);

        jLabel9.setText("Add Room:");

        manageRoomSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel7.setText("Drop Room:");

        addRoomSubmitButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        addRoomSubmitButton.setText("Submit");
        addRoomSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomSubmitButtonActionPerformed(evt);
            }
        });

        dropRoomSubmitButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        dropRoomSubmitButton.setText("Submit");
        dropRoomSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRoomSubmitButtonActionPerformed(evt);
            }
        });

        manageRoomLabel.setEditable(false);
        manageRoomLabel.setColumns(20);
        manageRoomLabel.setRows(5);
        jScrollPane5.setViewportView(manageRoomLabel);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addRoomJLabel)
                            .addComponent(manageRoomComboBox, 0, 100, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(manageRoomSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addRoomSubmitButton)
                            .addComponent(dropRoomSubmitButton))
                        .addGap(0, 492, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(addRoomJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(manageRoomSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addRoomSubmitButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(manageRoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dropRoomSubmitButton)))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(174, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Manage Room", jPanel6);

        cancelSubmitButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cancelSubmitButton.setText("Submit");
        cancelSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelSubmitButtonActionPerformed(evt);
            }
        });

        cancelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Faculty", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(cancelTable);

        cancelJLabel.setColumns(20);
        cancelJLabel.setRows(5);
        jScrollPane6.setViewportView(cancelJLabel);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(176, 176, 176)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(335, 335, 335)
                                .addComponent(cancelSubmitButton)))
                        .addGap(0, 213, Short.MAX_VALUE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(cancelSubmitButton)
                .addGap(52, 52, 52))
        );

        jTabbedPane1.addTab("Cancel", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(207, 207, 207)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
        String name = addFacultyNameTextField.getText(); //Getting faculty name entered by the faculty
        Faculty.addFaculty(name);
        addFacultyStatusLabel.setText(name + " has been added to Faculty!");  //Showing the message that faculty has been added
        rebuildFacultyComboBoxes(); // Showing the updated faculty list in the combobox
        
    }                                                

    private void reserveButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        
        String facultyName = reserveFacultyComboBox.getSelectedItem().toString();
        int seats = Integer.parseInt(reserveSeatsRequiredTextField.getText()); //Getting the seats required
        Date date = Date.valueOf(reserveDateComboBox.getSelectedItem().toString()); //Setting the date value to the value the user selected
        Timestamp timestamp = new Timestamp(Calendar.getInstance().getTime().getTime());
        ArrayList<String> reservedRooms = ReservationQueries.getRoomsReservedByDate(date); //ArrayList of the reserved rooms
        ArrayList<String> possibleRooms = RoomQueries.getAllPossibleRooms(seats); //Getting all the possible rooms for the seats required
        for(String room : possibleRooms){
            if(!reservedRooms.contains(room)){
                ReservationQueries.addReservationEntry(facultyName, room, date, seats, timestamp);  //Adding the reservation to the reservations table
                reserveStatusLabel.setText(room + " has been reserved for " + facultyName);
                rebuildCancelTable();
                return;
            }
        }
        WaitlistQueries.addWaitlistEntry(facultyName, date, seats, timestamp); //If no room available, add to the waitlist table 
        reserveStatusLabel.setText("No rooms available! Added your name to the waitlist.");
        rebuildCancelTable();

    }                                             

    private void reservationStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // TODO add your handling code here:
        Date date = Date.valueOf(reservationStatusDateComboBox.getSelectedItem().toString());
        ArrayList<ReservationEntry> reservedRooms = ReservationQueries.getReservationsByDate(date);
        reservationStatusTextArea.setText("Faculty \tRoom \tDate \tSeats \n"); //Making the format of the table
        for(ReservationEntry roomReserved : reservedRooms){
            reservationStatusTextArea.append(roomReserved.getFaculty() + "\t" + roomReserved.getRoom() + "\t" 
                    + roomReserved.getDate() + "\t" + roomReserved.getSeats() + "\n"); //Converting the reservation entries into a format that can be displayed
        }

    }                                                       

    private void waitlistStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // TODO add your handling code here:
        ArrayList<WaitlistEntry> waitlistedRooms = WaitlistQueries.getWaitlist(); // Adding waitlisted rooms to an arraylist 
        waitlistStatusTextArea.setText("Faculty \tDate \tSeats \n"); // Setting the column layout
        for(WaitlistEntry roomWaitlisted : waitlistedRooms){
            waitlistStatusTextArea.append(roomWaitlisted.getFaculty() + "\t" 
                    + roomWaitlisted.getDate() + "\t" + roomWaitlisted.getSeats() + "\n"); // Adding waitlist details to the text area
        }
    }                                                    

    private void addDateSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
        String spinnerValue = formater.format(addDateSpinner.getValue());
        Date day = Date.valueOf(spinnerValue);
        Dates.addDate(day);
        addDateLabel.setText(day.toString() + " has been added!"); // Informing the user that the date has been added
        rebuildDateComboBoxes(); // Updating the date combo box
    }                                                   

    private void cancelSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
        int row = cancelTable.getSelectedRow(); // Selecting row from the table in cancel tab
        DefaultTableModel tableModel = (DefaultTableModel) cancelTable.getModel();
        String type = cancelTable.getValueAt(row, 0).toString(); // Checking if the type is reservation or waitlist
        String faculty = cancelTable.getValueAt(row, 1).toString(); // Getting the faculty name from the table
        Date date = Date.valueOf(cancelTable.getValueAt(row, 2).toString()); // Getting the value of the date from the table
        tableModel.removeRow(row); // Removing the row from the table
        if(type.equals("R")){
            ReservationQueries.deleteReservationEntry(faculty, date); // Deleting the entry if it is a reservation entry
            cancelJLabel.setText("Faculty " + faculty + " reservation has been cancelled" + "\n"); // Informing the user that the reservation has been cancelled
            ArrayList<WaitlistEntry> waitlistReservations = WaitlistQueries.getWaitlist(); // Getting all the waitlist entries
            for (WaitlistEntry waitlist : waitlistReservations) {
                ArrayList<String> getAllRooms = RoomQueries.getAllPossibleRooms(waitlist.getSeats()); // Checking if the new room available can be assigned to someone
                ArrayList<String> rooms = ReservationQueries.getRoomsReservedByDate(waitlist.getDate()); // Checking all rooms available on the given date
                for (String room : getAllRooms) {
                    if (!rooms.contains(room)) {
                        ReservationQueries.addReservationEntry(waitlist.getFaculty(), room, waitlist.getDate(), waitlist.getSeats(), waitlist.getTimestamp()); // If room available then adding the reservation entry to the database
                        WaitlistQueries.deleteWaitlistEntry(waitlist.getFaculty(), waitlist.getDate()); // Deleting thw waitlist after the room has been assigned to another user
                        cancelJLabel.append("Faculty " + waitlist.getFaculty() + " has reseerved room " + room + " for date " + date.toString() + "\n"); // Informing the user
                        rebuildCancelTable(); // Keeping the cancel table updated

                    }

            }
        }
        }
        else{
            WaitlistQueries.deleteWaitlistEntry(faculty, date); // Deleting the wailtist entry
            cancelJLabel.setText("Faculty " + faculty + " waitlist has been cancelled\n"); // Informing the user that the waitlist has been cancelled
        }
        
        
        
        
        
        
    }                                                  

    private void reserveDateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
    }                                                   

    private void reservationStatusByFacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                                 
        // TODO add your handling code here:
        String faculty = (reservationStatusByFacultyComboBox.getSelectedItem().toString());
        ArrayList<ReservationEntry> reservedRooms = ReservationQueries.getReservationsByFaculty(faculty);
        reservationStatusByFacultyTextArea.setText("Faculty \tRoom \tDate \tSeats \n"); //Making the format of the table
        for(ReservationEntry roomReserved : reservedRooms){
            reservationStatusByFacultyTextArea.append(roomReserved.getFaculty() + "\t" + roomReserved.getRoom() + "\t" 
                    + roomReserved.getDate() + "\t" + roomReserved.getSeats() + "\n"); //Converting the reservation entries into a format that can be displayed
        }
    }                                                                

    private void dropRoomSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // TODO add your handling code here
        String name = manageRoomComboBox.getSelectedItem().toString();
        ArrayList<ReservationEntry> reservations = ReservationQueries.getReservationsByRoom(name);
        RoomQueries.dropRoom(name);
        manageRoomLabel.setText("Room " + name + " has been dropped!\n");
        rebuildRoomComboBoxes();
        manageRoomLabel.setText(name + " has been dropped!");
        for(ReservationEntry reservation: reservations){
            ReservationQueries.deleteReservationEntry(reservation.getFaculty(), reservation.getDate());
            manageRoomLabel.append(reservation.getFaculty() + " has been moved to the waitlist\n");
            WaitlistQueries.addWaitlistEntry(reservation.getFaculty(), reservation.getDate(), reservation.getSeats(), reservation.getTimestamp());
        }
        ArrayList<WaitlistEntry> waitlists = WaitlistQueries.getWaitlist();
        for(WaitlistEntry waitlist: waitlists){
            ArrayList<String> rooms = RoomQueries.getAllPossibleRooms(waitlist.getSeats());
            ArrayList<String> reservationsByDate = ReservationQueries.getRoomsReservedByDate(waitlist.getDate());
            for(String r: rooms){
                if(!reservationsByDate.contains(r)){
                    ReservationQueries.addReservationEntry(waitlist.getFaculty(), r, waitlist.getDate(), waitlist.getSeats(), waitlist.getTimestamp());
                    WaitlistQueries.deleteWaitlistEntry(waitlist.getFaculty(), waitlist.getDate());
                    manageRoomLabel.append(waitlist.getFaculty() + " has reserved " + r + " for date " + waitlist.getDate().toString() + "\n");
                    break;
                    
                }
            }
        }
        rebuildCancelTable();
    }                                                    

    private void addRoomSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
        String name = addRoomJLabel.getText(); // addRoomJLabel is a text field not a label. Getting the name entered by the user
        int seats = Integer.parseInt(manageRoomSpinner.getValue().toString()); // Getting the seats of the room entered by the user
        RoomQueries.addRoom(name, seats); // Adding the room to the database
        rebuildRoomComboBoxes(); // Updating the room combo box
        manageRoomLabel.setText("Room " + name + " has been added!" + "\n"); // Informing the user that a new room has been added
        ArrayList<WaitlistEntry> waitlistReservations = WaitlistQueries.getWaitlist(); // Putting all the waitlist into an arraylist
        for(WaitlistEntry waitlist: waitlistReservations){
            ArrayList<String> getAllRooms = RoomQueries.getAllPossibleRooms(waitlist.getSeats()); // Getting all possible rooms with the given seats
            ArrayList<String> rooms = ReservationQueries.getRoomsReservedByDate(waitlist.getDate()); // Getting the waitlist entries for the given date
            for(String room: getAllRooms){
                if(!rooms.contains(room)){
                    ReservationQueries.addReservationEntry(waitlist.getFaculty(), room, waitlist.getDate(), waitlist.getSeats(), waitlist.getTimestamp()); // Adding the reservation to the table
                    WaitlistQueries.deleteWaitlistEntry(waitlist.getFaculty(), waitlist.getDate()); // Deleting the waitlist entry which has been reserved in the previous line
                    manageRoomLabel.append("Faculty "+waitlist.getFaculty()+ " has been reseerved to room " + room + "\n"); // Informing the user
                    rebuildCancelTable(); // Updating the cancel table

                }

            }
        }
    }                                                   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame dialog = new MainFrame(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel addDateLabel;
    private javax.swing.JSpinner addDateSpinner;
    private javax.swing.JButton addDateSubmitButton;
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JTextField addFacultyNameTextField;
    private javax.swing.JLabel addFacultyStatusLabel;
    private javax.swing.JTextField addRoomJLabel;
    private javax.swing.JButton addRoomSubmitButton;
    private javax.swing.JTextArea cancelJLabel;
    private javax.swing.JButton cancelSubmitButton;
    private javax.swing.JTable cancelTable;
    private javax.swing.JButton dropRoomSubmitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JComboBox<String> manageRoomComboBox;
    private javax.swing.JTextArea manageRoomLabel;
    private javax.swing.JSpinner manageRoomSpinner;
    private javax.swing.JButton reservationStatusButton;
    private javax.swing.JButton reservationStatusByFacultyButton;
    private javax.swing.JComboBox<String> reservationStatusByFacultyComboBox;
    private javax.swing.JTextArea reservationStatusByFacultyTextArea;
    private javax.swing.JComboBox<String> reservationStatusDateComboBox;
    private javax.swing.JTextArea reservationStatusTextArea;
    private javax.swing.JButton reserveButton;
    private javax.swing.JComboBox<String> reserveDateComboBox;
    private javax.swing.JComboBox<String> reserveFacultyComboBox;
    private javax.swing.JTextField reserveSeatsRequiredTextField;
    private javax.swing.JLabel reserveStatusLabel;
    private javax.swing.JButton waitlistStatusButton;
    private javax.swing.JTextArea waitlistStatusTextArea;
    // End of variables declaration                   
}
